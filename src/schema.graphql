type Bid implements Node {
  _id: ID!
  productId: ID!
  productSlug: String!
  reactionVariantId: ID!
  reactionProductId: ID!
  product: ProductVariant
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  offerBy: ID
  activeOffer: Offer
  sellerOffer: Offer
  buyerOffer: Offer
  canAccept: ID
  offers: [Offer]
  gameCanAccept: ID
  acceptedGame: Offer
  gameAcceptedAt: DateTime
  gameAcceptedBy: ID
  acceptedOffer: Offer
  shopId: ID!
  createdBy: ID
  wonBy: ID
  lostBy: ID
  createdByinfo: createdByUserinfo
  soldBy: ID
  soldByInfo: createdByUserinfo
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ConnectionCursor
  endCursor: ConnectionCursor
}

type BidConnection {
  bids: [Bid]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AllOffersConnection {
  offers: [DetailedOffer]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DetailedOffer {
  _id: ID!
  productId: ID!
  variantId: ID!
  productSlug: String!
  reactionVariantId: ID!
  reactionProductId: ID!
  shopId: ID!
  createdBy: ID!
  soldBy: ID!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  # Product Details
  product: ProductDetails

  # User Details
  buyer: UserDetails
  seller: UserDetails

  # Offer Details
  activeOffer: Offer
  buyerOffer: Offer
  sellerOffer: Offer
  acceptedOffer: Offer
  offers: [Offer]!

  # Game Details
  gameCanAccept: ID
  acceptedGame: Offer
  gameAcceptedAt: DateTime
  gameAcceptedBy: ID
  wonBy: ID
  lostBy: ID
  acceptAction: String
  acceptedBy: ID
}

type ProductDetails {
  _id: ID!
  productId: ID!
  title: String!
  slug: String!
  description: String
  type: String!
  isVisible: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  shopId: ID!
  vendor: String
  originCountry: String
  sku: String
  barcode: String
  pageTitle: String
  metaDescription: String
  weight: Float
  length: Float
  width: Float
  height: Float

  # Media
  primaryImage: MediaDetails
  media: [MediaDetails]!

  # Pricing
  pricing: PricingDetails

  # Product Status
  isBackorder: Boolean!
  isLowQuantity: Boolean!
  isSoldOut: Boolean!

  # Metafields
  metafields: [Metafield]!

  # Variants
  variants: [VariantDetails]!

  # Tags
  tagIds: [ID]!

  # Social Metadata
  socialMetadata: [SocialMetadata]!

  # Supported Fulfillment Types
  supportedFulfillmentTypes: [String]!
}

type VariantDetails {
  _id: ID!
  variantId: ID!
  title: String!
  optionTitle: String!
  attributeLabel: String
  index: Int!
  sku: String
  barcode: String
  createdAt: DateTime!
  updatedAt: DateTime!
  shopId: ID!
  ancestorId: ID!

  # Media
  media: [MediaDetails]!
  primaryImage: MediaDetails

  # Pricing
  pricing: PricingDetails

  # Variant Status
  isSoldOut: Boolean!
  isTaxable: Boolean!
  taxCode: String
  taxDescription: String

  # Uploader Info
  uploadedBy: UploaderInfo

  # Metafields
  metafields: [Metafield]!

  # Physical Properties
  weight: Float
  length: Float
  width: Float
  height: Float
  originCountry: String
  minOrderQuantity: Int
  size: String
}

type UserDetails {
  _id: ID!
  userId: ID!
  name: String
  username: String
  email: String
  profile: UserProfile
  storeName: String
  storeLogo: String
  bio: String
  roles: String
  total_spent: Float
  billing: AddressDetails
  shipping: AddressDetails
  createdAt: DateTime
  updatedAt: DateTime
  shopId: ID
  state: String
  acceptsMarketing: String
  wp_user_id: String
}

type UserProfile {
  name: String
  picture: String
  username: String
  identityVerified: Boolean
}

type AddressDetails {
  firstname: String
  lastname: String
  company: String
  email: String
  phone: String
  address: String
  address2: String
  postcode: String
  city: String
  state: String
  country: String
}

type MediaDetails {
  URLs: MediaURLs!
  priority: Int!
  productId: String
}

type MediaURLs {
  large: String
  medium: String
  original: String
  small: String
  thumbnail: String
}

type PricingDetails {
  USD: CurrencyPricing
}

type CurrencyPricing {
  compareAtPrice: Float
  displayPrice: String
  maxPrice: Float
  minPrice: Float
  price: Float
}

type UploaderInfo {
  name: String!
  userId: ID!
}

type Money {
  amount: Float!
  currencyCode: String!
}
type Offer implements Node {
  _id: ID!
  amount: Money!
  text: String
  updatedAt: DateTime
  createdAt: DateTime
  sender: createdByUserinfo
  createdBy: ID
  type: offerTypes
  status: String
  reciever: createdByUserinfo
  createdFor: ID
  canAccept: ID
}
extend type Query {
  getBidsbyAccountId: [Bid]
  getBidsbySellerId(first: Int, after: String): BidConnection
  getRecentOffer(
    productId: ID!
    variantId: ID!
    first: Int
    after: String
  ): BidConnection
  myNotifications: [Notification]
  getActiveBidOnProduct(input: activeBidInput): activeBidPayLoad
  getBidsbyUserId(userId: ID!, isSeller: Boolean!): [Bid]
  getAllOffersWithDetails(
    first: Int
    after: String
    status: String
    productId: ID
    userId: ID
  ): AllOffersConnection
}
type Notification {
  _id: ID
  details: String
  hasDetails: Boolean
  message: String
  status: notificationStatus
  timeSent: DateTime
  to: ID!
  from: ID
  sender: createdByUserinfo
  type: notificationTypes
  url: String
}
input createNotificationInput {
  details: String
  hasDetails: Boolean!
  message: String!
  to: ID!
  type: notificationTypes!
}

enum notificationTypes {
  bid
  offer
  follow
  newOrder
  orderCanceled
  orderAccepted
}
enum notificationStatus {
  unread
  read
}
extend type Subscription {
  offer(userId: ID!): offerSubscriptionPayload
  newBid(userId: ID!): Bid
  startCoinToss(bidId: ID!): coinTossSubscriptionPayload
  notifications(userId: ID!): Notification
}

type coinTossSubscriptionPayload {
  result: String
  wonBy: ID
  wonByInfo: createdByUserinfo
  lostByInfo: createdByUserinfo
  lostBy: ID
  data: String
  head: ID
  tail: ID
  bidId: ID
  winnerOffer: Offer
  loserOffer: Offer
}
type offerSubscriptionPayload {
  offer: Offer!
  offerType: offerTypes!
  bidId: ID
  canAccept: ID
  canAcceptGame: ID
  productId: ID
  variantId: ID
  userId: ID
}
extend type Mutation {
  placeBidOnProduct(input: placeBidInput): placeBidPayLoad
  sendOffer(input: sendOfferInput): Offer
  updateCartOfferPrice(cartId: ID!, bidId: ID!): Cart
  createNotification(input: createNotificationInput): Notification
  markAsRead(notificationId: ID): Notification
}

enum coinTossOptions {
  head
  tail
}
type coinTossResult {
  userSelection: String
  winner: ID
  loser: ID
  acceptedOffer: Offer
}
input activeBidInput {
  productId: ID!
  variantId: ID!
}
type activeBidPayLoad {
  bidId: ID!
  offer: Offer
  isValid: Boolean
}
type placeBidPayLoad {
  bidId: ID
}
input placeBidInput {
  shopId: ID!
  productId: ID!
  variantId: ID!
  soldby: ID!
  offer: offerInput!
  offerType: offerTypes!
  productPrice: MoneyInput!
}
input offerInput {
  amount: MoneyInput!
  text: String
  status: String
}

input sendOfferInput {
  bidId: ID!
  offer: offerInput!
  to: ID!
  type: offerTypes!
}
enum offerTypes {
  text
  counterOffer
  acceptedOffer
  rejectOffer
  gameRequest
  acceptedGame
  rejectedGame
}

extend type Mutation {
  followUser(userName: String!): profileObj
  unfollowUser(userName: String!): String
}
extend type Query {
  getUserByuserName(userName: String!): userProfile
  isAvailable(userName: String!): Boolean
}
type followUserInfo {
  image: String
  name: String
  userName: String
}
type profile {
  name: String
  picture: String
  username: String
  firstName: String
  lastName: String
}
type profileObj {
  name: String
  profile: profile
  username: String
}
extend type ProductVariant {
  slug: String
}
type userProfile {
  name: String
  userName: String
  profilePhoto: String
  products: [ProductVariant]
  follower: [profileObj]
  following: [profileObj]
  isVerified: Boolean
  canFollow: Boolean
}
